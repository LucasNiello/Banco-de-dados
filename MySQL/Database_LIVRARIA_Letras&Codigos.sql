-- GERAÇÃO DE MODELO FÍSICO - MYSQL

-- PASSO 1: CRIAR E SELECIONAR O BANCO DE DADOS COM UM NOME VÁLIDO
CREATE DATABASE IF NOT EXISTS LIVRARIA_LETRAS_E_CODIGOS; -- CRIA O BANCO DE DADOS, MAS APENAS SE ELE AINDA NÃO EXISTIR.
USE LIVRARIA_LETRAS_E_CODIGOS; -- SELECIONA O BANCO DE DADOS PARA QUE TODOS OS COMANDOS SEGUINTES SEJAM EXECUTADOS NELE.

-- PASSO 2: CRIAR AS TABELAS COM OS TIPOS DE DADOS E RELACIONAMENTOS CORRETOS

-- TABELA DE AUTORES
CREATE TABLE AUTORES (
    ID_AUTOR INT PRIMARY KEY AUTO_INCREMENT, -- CHAVE PRIMÁRIA: IDENTIFICADOR ÚNICO QUE SE AUTO-INCREMENTA A CADA NOVO AUTOR.
    NOME VARCHAR(100) NOT NULL, -- NOT NULL SIGNIFICA QUE ESTE CAMPO É DE PREENCHIMENTO OBRIGATÓRIO.
    NACIONALIDADE VARCHAR(50),
    DATA_NASCIMENTO DATE -- TIPO DE DADO ESPECÍFICO PARA ARMAZENAR DATAS NO FORMATO 'AAAA-MM-DD'.
);

-- TABELA DE EDITORAS
CREATE TABLE EDITORAS (
    ID_EDITORA INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(100) NOT NULL UNIQUE, -- UNIQUE GARANTE QUE NÃO HAVERÁ DUAS EDITORAS COM O MESMO NOME.
    CNPJ VARCHAR(18) UNIQUE,
    ENDERECO VARCHAR(255),
    CIDADE VARCHAR(100),
    CONTATO_NOME VARCHAR(100),
    TELEFONE VARCHAR(20)
);

-- TABELA DE CLIENTES
CREATE TABLE CLIENTES (
    ID_CLIENTE INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(100) NOT NULL,
    CPF VARCHAR(14) NOT NULL UNIQUE, -- CPF TAMBÉM DEVE SER ÚNICO PARA CADA CLIENTE.
    EMAIL VARCHAR(100) UNIQUE,
    TELEFONE VARCHAR(20),
    DATA_NASCIMENTO DATE
);

-- TABELA DE LIVROS (COM AS CHAVES ESTRANGEIRAS PARA AUTORES E EDITORAS)
CREATE TABLE LIVROS (
    ID_LIVRO INT PRIMARY KEY AUTO_INCREMENT,
    TITULO VARCHAR(255) NOT NULL,
    ID_AUTOR_FK INT NOT NULL, -- ESTA SERÁ A CHAVE ESTRANGEIRA QUE LIGA O LIVRO AO SEU AUTOR.
    ID_EDITORA_FK INT NOT NULL, -- ESTA SERÁ A CHAVE ESTRANGEIRA QUE LIGA O LIVRO À SUA EDITORA.
    GENERO VARCHAR(50),
    PRECO DECIMAL(10, 2) NOT NULL, -- DECIMAL É O TIPO IDEAL PARA DINHEIRO, COM 10 DÍGITOS NO TOTAL E 2 APÓS A VÍRGULA.
    QUANTIDADE_ESTOQUE INT NOT NULL,
    DATA_PUBLICACAO DATE, -- ADICIONADO PARA ARMAZENAR A DATA DE PUBLICAÇÃO DO LIVRO.
    FOREIGN KEY (ID_AUTOR_FK) REFERENCES AUTORES(ID_AUTOR), -- CRIA O RELACIONAMENTO: ID_AUTOR_FK DESTA TABELA REFERENCIA ID_AUTOR DA TABELA AUTORES.
    FOREIGN KEY (ID_EDITORA_FK) REFERENCES EDITORAS(ID_EDITORA) -- CRIA O RELACIONAMENTO COM A TABELA EDITORAS.
);

-- TABELA DE VENDAS (COM A CHAVE ESTRANGEIRA PARA CLIENTES)
CREATE TABLE VENDAS (
    ID_VENDA INT PRIMARY KEY AUTO_INCREMENT,
    ID_CLIENTE_FK INT NOT NULL,
    DATA_VENDA TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- TIMESTAMP ARMAZENA DATA E HORA. DEFAULT PREENCHA AUTOMATICAMENTE COM O MOMENTO DA CRIAÇÃO.
    VALOR_TOTAL DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (ID_CLIENTE_FK) REFERENCES CLIENTES(ID_CLIENTE) -- LIGA A VENDA AO CLIENTE QUE A REALIZOU.
);

-- TABELA DE ITENS DA VENDA (TABELA ASSOCIATIVA QUE DETALHA OS PRODUTOS DE UMA VENDA)
CREATE TABLE ITENSVENDA (
    ID_ITEM_VENDA INT PRIMARY KEY AUTO_INCREMENT,
    ID_VENDA_FK INT NOT NULL, -- CHAVE ESTRANGEIRA QUE APONTA PARA A VENDA ESPECÍFICA.
    ID_LIVRO_FK INT NOT NULL, -- CHAVE ESTRANGEIRA QUE APONTA PARA O LIVRO VENDIDO.
    QUANTIDADE INT NOT NULL,
    PRECO_UNITARIO DECIMAL(10, 2) NOT NULL, -- GUARDA O PREÇO DO LIVRO NO MOMENTO DA VENDA, PARA HISTÓRICO.
    FOREIGN KEY (ID_VENDA_FK) REFERENCES VENDAS(ID_VENDA),
    FOREIGN KEY (ID_LIVRO_FK) REFERENCES LIVROS(ID_LIVRO)
);

-- PASSO 3: COMANDOS DE MANIPULAÇÃO DE DADOS (DML) E CONSULTA (DQL)

-- INSERINDO DADOS INICIAIS (POPULAÇÃO DO BANCO)
INSERT INTO AUTORES (NOME, NACIONALIDADE, DATA_NASCIMENTO) VALUES
('MACHADO DE ASSIS', 'BRASILEIRO', '1839-06-21'),
('J.K. ROWLING', 'BRITÂNICA', '1965-07-31'),
('GEORGE ORWELL', 'BRITÂNICO', '1903-06-25');

INSERT INTO EDITORAS (NOME, CNPJ, ENDERECO, CIDADE, CONTATO_NOME, TELEFONE) VALUES
('ROCCO', '12.345.678/0001-99', 'RUA DOS BOBOS, 0', 'RIO DE JANEIRO', 'CARLOS', '21-9999-8888'),
('COMPANHIA DAS LETRAS', '98.765.432/0001-11', 'AV. PAULISTA, 2073', 'SÃO PAULO', 'ANA', '11-8888-7777');

INSERT INTO CLIENTES (NOME, CPF, EMAIL, TELEFONE, DATA_NASCIMENTO) VALUES
('JOÃO SILVA', '111.222.333-44', 'JOAO.SILVA@EMAIL.COM', '11-1234-5678', '1990-05-15'),
('MARIA OLIVEIRA', '555.666.777-88', 'MARIA.O@EMAIL.COM', '21-9876-5432', '1985-11-20');

-- NOTE QUE OS NÚMEROS '1', '2', '3' EM ID_AUTOR_FK CORRESPONDEM AOS IDS DOS AUTORES INSERIDOS ACIMA.
INSERT INTO LIVROS (TITULO, ID_AUTOR_FK, ID_EDITORA_FK, GENERO, PRECO, QUANTIDADE_ESTOQUE) VALUES
('DOM CASMURRO', 1, 2, 'ROMANCE', 45.50, 50),
('HARRY POTTER E A PEDRA FILOSOFAL', 2, 1, 'FANTASIA', 59.90, 100),
('1984', 3, 2, 'FICÇÃO CIENTÍFICA', 52.00, 30);

-- CONSULTAS (READ)
-- CONSULTAR TODOS OS LIVROS COM NOME DO AUTOR E EDITORA
SELECT
    L.TITULO, -- SELECIONA A COLUNA 'TITULO' DA TABELA LIVROS
    L.PRECO,
    A.NOME AS AUTOR, -- SELECIONA A COLUNA 'NOME' DA TABELA AUTORES E A RENOMEIA PARA 'AUTOR' NO RESULTADO.
    E.NOME AS EDITORA
FROM LIVROS L -- DEFINE 'L' COMO UM APELIDO PARA A TABELA LIVROS, PARA FACILITAR A ESCRITA.
INNER JOIN AUTORES A ON L.ID_AUTOR_FK = A.ID_AUTOR -- JUNTA COM A TABELA AUTORES ONDE A CHAVE ESTRANGEIRA E PRIMÁRIA SE CORRESPONDEM.
INNER JOIN EDITORAS E ON L.ID_EDITORA_FK = E.ID_EDITORA; -- FAZ O MESMO PARA A TABELA EDITORAS.

-- CONSULTAR LIVROS COM ESTOQUE BAIXO (MENOS DE 40 UNIDADES)
SELECT TITULO, QUANTIDADE_ESTOQUE FROM LIVROS WHERE QUANTIDADE_ESTOQUE < 40; -- A CLÁUSULA WHERE FILTRA OS RESULTADOS.

-- ATUALIZAÇÃO (UPDATE)
-- ATUALIZAR O PREÇO DE UM LIVRO ESPECÍFICO
UPDATE LIVROS -- INDICA QUAL TABELA SERÁ ATUALIZADA.
SET PRECO = 49.90 -- DEFINE O NOVO VALOR PARA A COLUNA 'PRECO'.
WHERE ID_LIVRO = 1; -- CLÁUSULA OBRIGATÓRIA PARA ESPECIFICAR QUAL REGISTRO SERÁ ALTERADO.

-- SIMULAÇÃO DE OPERAÇÕES DA LIVRARIA
-- CADASTRO DE UM NOVO AUTOR (RESULTARÁ NO ID_AUTOR = 4)
INSERT INTO AUTORES (NOME, NACIONALIDADE, DATA_NASCIMENTO) VALUES ('CLARICE LISPECTOR', 'UCRANIANA-BRASILEIRA', '1920-12-10');

-- CADASTRO DE UM NOVO LIVRO USANDO O ID DO NOVO AUTOR
INSERT INTO LIVROS (TITULO, ID_AUTOR_FK, ID_EDITORA_FK, GENERO, PRECO, QUANTIDADE_ESTOQUE) VALUES
('A HORA DA ESTRELA', 4, 2, 'ROMANCE', 38.00, 60);

-- REGISTRO DE UMA VENDA
-- SIMULANDO UMA VENDA PARA O CLIENTE 'JOÃO SILVA' (ID 1) COMPRANDO
-- 1 'DOM CASMURRO' (ID 1, PREÇO 49.90) E 2 '1984' (ID 3, PREÇO 52.00)

-- PASSO A: INSERIR A VENDA COM O VALOR TOTAL CALCULADO (1*49.90 + 2*52.00 = 153.90)
INSERT INTO VENDAS (ID_CLIENTE_FK, VALOR_TOTAL) VALUES (1, 153.90);

-- PASSO B: PEGAR O ID DA VENDA QUE ACABAMOS DE CRIAR PARA USAR NA TABELA DE ITENS
SET @ID_ULTIMA_VENDA = LAST_INSERT_ID(); -- FUNÇÃO DO MYSQL QUE RECUPERA O ÚLTIMO ID GERADO POR AUTO_INCREMENT.

-- PASSO C: INSERIR OS ITENS NA TABELA ITENSVENDA, LIGANDO-OS AO ID DA VENDA
INSERT INTO ITENSVENDA (ID_VENDA_FK, ID_LIVRO_FK, QUANTIDADE, PRECO_UNITARIO) VALUES
(@ID_ULTIMA_VENDA, 1, 1, 49.90),
(@ID_ULTIMA_VENDA, 3, 2, 52.00);

-- PASSO D: ATUALIZAR O ESTOQUE DOS LIVROS VENDIDOS
UPDATE LIVROS SET QUANTIDADE_ESTOQUE = QUANTIDADE_ESTOQUE - 1 WHERE ID_LIVRO = 1;
UPDATE LIVROS SET QUANTIDADE_ESTOQUE = QUANTIDADE_ESTOQUE - 2 WHERE ID_LIVRO = 3;

-- RELATÓRIOS
-- RELATÓRIO DE LIVROS MAIS VENDIDOS
SELECT
    L.TITULO,
    SUM(IV.QUANTIDADE) AS TOTAL_VENDIDO -- SUM() É UMA FUNÇÃO DE AGREGAÇÃO QUE SOMA TODOS OS VALORES DE 'QUANTIDADE'.
FROM ITENSVENDA IV
INNER JOIN LIVROS L ON IV.ID_LIVRO_FK = L.ID_LIVRO
GROUP BY L.TITULO -- AGRUPA AS LINHAS POR TÍTULO PARA QUE O SUM() SOME AS QUANTIDADES POR LIVRO.
ORDER BY TOTAL_VENDIDO DESC; -- ORDENA O RESULTADO DO MAIOR PARA O MENOR TOTAL VENDIDO.

-- RELATÓRIO DE CLIENTES ATIVOS (QUE JÁ FIZERAM COMPRAS)
SELECT DISTINCT -- DISTINCT GARANTE QUE CADA CLIENTE APAREÇA APENAS UMA VEZ, MESMO QUE TENHA FEITO VÁRIAS COMPRAS.
    C.NOME,
    C.EMAIL,
    C.TELEFONE
FROM CLIENTES C
INNER JOIN VENDAS V ON C.ID_CLIENTE = V.ID_CLIENTE_FK;

--  ===========================================================================================
-- ATUALIZAÇÃO DE DATA DE PUBLICAÇÃO
UPDATE LIVROS SET DATA_PUBLICACAO = '1899-01-01' WHERE ID_LIVRO = 1;
UPDATE LIVROS SET DATA_PUBLICACAO = '1997-06-26' WHERE ID_LIVRO = 2;
UPDATE LIVROS SET DATA_PUBLICACAO = '1949-06-08' WHERE ID_LIVRO = 3;
UPDATE LIVROS SET DATA_PUBLICACAO = '1977-10-01' WHERE ID_LIVRO = 4;
-- =============================================================================================
-- CONSULTA POR TÍTULO CONTENDO 'A' E ANO DE PUBLICAÇÃO MAIOR QUE 2025
SELECT TITULO, PRECO, DATA_PUBLICACAO
FROM LIVROS
WHERE TITULO LIKE '%A%'
    AND YEAR(DATA_PUBLICACAO) > 2025;

-- LIMITAR CONSULTA DE LIVROS (RETORNA ATÉ 5 REGISTROS)
SELECT TITULO
FROM LIVROS
LIMIT 5;

-- CONSULTA COM ALIAS CORRETOS
SELECT TITULO AS NOME, YEAR(DATA_PUBLICACAO) AS ANO
FROM LIVROS;

-- CONSULTA COM JOIN ENTRE LIVROS E AUTORES
SELECT L.TITULO, A.NOME AS AUTOR
FROM LIVROS L
INNER JOIN AUTORES A ON L.ID_AUTOR_FK = A.ID_AUTOR;

-- CONSULTA DE AGRUPAMENTO POR TÍTULO
SELECT TITULO, COUNT(*) AS QUANTIDADE
FROM LIVROS
GROUP BY TITULO;


